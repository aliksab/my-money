const express = require("express");
const mongoose = require("mongoose");
const config = require("config");
const chalk = require("chalk");
const cors = require("cors");
const path = require("path");
const routes = require("./routes");
const TelegramApi = require("node-telegram-bot-api");
const User = require("./models/User");
const Invoice = require("./models/Invoice");
const InvoiceManipulation = require("./models/InvoiceManipulation");
const app = express();

app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cors());
app.use("/api", routes);
app.use("/uploads", express.static("uploads"));

const tgToken = config.get("tgApiToken");
const bot = new TelegramApi(tgToken, { polling: true });

const PORT = config.get("port") ?? 8080;

if (process.env.NODE_ENV === "production") {
  app.use("/", express.static(path.join(__dirname, "client")));

  const indexPath = path.join(__dirname, "client", "index.html");

  app.get("*", (req, res) => {
    console.log(res);
    res.sendFile(indexPath);
  });
}

async function start() {
  try {
    await mongoose.connect(config.get("mongoUri"));
    app.listen(PORT, () => {
      console.log(chalk.green(`Server has been started on port ${PORT}...`));
    });
  } catch (error) {
    console.log(chalk.red(error.message));
    process.exit(1);
  }
}

start();
// const commands = [
//     {
//         command: "start",
//         description: "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"
//     },
//     {
//         command: "help",
//         description: "–†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏"
//     },
// ]

// bot.setMyCommands(commands);

bot.on("message", async (msg) => {
  const text = msg.text;
  const chatId = msg.chat.id;
  let user = await User.find();
  user = user.filter((user) => user.userName == msg.from.id);
  let userId = "";
  user.map((u) => (userId = u._id));
  try {
    if (text.split(" ")[0] === "/start") {
      if (text.split(" ")[1]) {
        const userData = text.split(" ")[1];
        let user = await User.findById(userData);
        user.userName = msg.from.id;
        await User.findByIdAndUpdate(userData, user, { new: true });
      }
      if (userId === "") {
        return bot.sendMessage(
          chatId,
          "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ —Å–∞–π—Ç –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        );
      } else {
        await bot.sendMessage(
          chatId,
          "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞ –í–∞—à–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ my-money"
        );
        return userId;
      }
    }

    if (text == "/help") {
      return bot.sendMessage(
        chatId,
        "–û—Å—Ç–∞–≤—å—Ç–µ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –±–æ—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ @MyMoney_Error_bot"
      );
    }

    bot.sendMessage(chatId, `–ú–µ–Ω—é –±–æ—Ç–∞`, {
      reply_markup: {
        //–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—é-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard: [
          ["üí∏ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é"],
          ["üìÉ –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"],
          ["‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é"],
        ],
        //–ü–æ–¥–≥–æ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –º–µ–Ω—é-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        resize_keyboard: true,
      },
    });

    if (text == "üí∏ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é") {
      const list = await Invoice.find();
      const result = list.filter((invoice) => invoice.userId == String(userId));

      result.map((invoice) =>
        bot.sendMessage(
          chatId,
          invoice.name + " –°—É–º–º–∞ —Å—Ä–µ–¥—Å—Ç–≤ " + invoice.amount,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ —Å—á—ë—Ç—É",
                    callback_data: invoice._id,
                  },
                ],
              ],
            },
          }
        )
      );
    }
    if (text == "üìÉ –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π") {
      const list = await InvoiceManipulation.find();
      const result = list.filter(
        (manipulation) => manipulation.userId == String(userId)
      );
      result.map((manipulation) => {
        bot.sendMessage(
          chatId,
          (manipulation.type === "expense" ? "–†–∞—Å—Ö–æ–¥" : "–î–æ—Ö–æ–¥") +
            `\n<b>–°—É–º–º–∞ —Å—Ä–µ–¥—Å—Ç–≤:</b> ` +
            manipulation.amount,
          {
            parse_mode: "HTML",
          }
        );
      });
    }
    if (text == "‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é") {
      return bot.sendMessage(chatId, "–ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ", {
        reply_markup: {
          remove_keyboard: true,
        },
      });
    }
  } catch (error) {
    console.log(error);
  }
});
bot.on("callback_query", async (ctx) => {
  const updateInvoice = await Invoice.findById(ctx.data)
  const chatId = ctx.message.chat.id;
  let user = await User.find();
  user = user.filter((user) => user.userName == ctx.from.id);
  let userId = "";
  user.map((u) => (userId = u._id));
  try {
    let newTransaction = {
      type: "",
      invoiceId: ctx.data,
      amount: "",
      manipulation: "other",
      description: "",
      userId: String(userId),
    };
    bot.sendMessage(
      chatId,
      '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü—Ä–∏–º–µ—Ä: "–î–æ—Ö–æ–¥ 1000 –µ–¥–∞"'
    );
    await bot.on("message", async (type) => {
      const res = type.text.split(" ");
      if (res[0].toLowerCase() === "–¥–æ—Ö–æ–¥") {
        newTransaction.type = "profit";
        res.shift();
      } else if (res[0].toLowerCase() === "—Ä–∞—Å—Ö–æ–¥") {
        newTransaction.type = "expense";
        res.shift();
      } else {
        return;
      }

      if (Number(res[0]) > 0) {
        newTransaction.amount = Number(res[0]);
        res.shift();
      } else {
        bot.sendMessage(chatId, "–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0");
        return;
      }

      newTransaction.description = res.join(" ");

      if (newTransaction.description != "") {
        await InvoiceManipulation.create({ ...newTransaction });
        let newAmount = updateInvoice.amount;
        newTransaction.type === "profit"
            ? (newAmount += Number(newTransaction.amount))
            : (newAmount -= Number(newTransaction.amount));
        updateInvoice.amount = newAmount
        await Invoice.findByIdAndUpdate(
          newTransaction.invoiceId,
          updateInvoice,
          { new: true }
        );
        try {
          return bot.sendMessage(chatId, "–ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞");
        } catch (error) {
          console.log(error);
        }
      }
    });
  } catch (error) {
    console.log(error);
  }
});
